head(mixtures)
ggplot(data=mixtures) + geom_histogram(aes(x= Superplasticizer))
ggplot(data=mixtures) + geom_histogram(aes(x= log(Superplasticizer + 1)))
ggplot(data=mixtures) + geom_histogram(aes(x= log(Superplasticizer)))
summary(mixtures)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
colnames(training)
grep(^"IL", x= colnames(training), ignore.case = T)
grep("^IL", x= colnames(training), ignore.case = T)
grepl("^IL", x= colnames(training), ignore.case = T)
columns = colnames(training)
filter = grepl("^IL", x= colnames(training), ignore.case = T)
columns[filter]
filter2 = columns[filter]
filter2
typeof(filter2)
View(filter2)
training2 = training[,colnames(training) %in% filter2]
head(training2)
training2 = training[,colnames(training) %in% filtered_columns]
filtered_columns = columns[filter]
training2 = training[,colnames(training) %in% filtered_columns]
head(training2)
preProcess(x = training2, method = "pca")
preProcess(x = training2, method = "pca", thresh = 0.90)
training3 = preProcess(x = training2, method = "pca", thresh = 0.80)
training3
View(training3)
View(training2)
View(testing)
head(training)
training2$diadiagnosis = training$diadiagnosis
modelFit = train(diadiagnosis ~ ., data=training2, method = "glm")
training2$diagnosis = training$diagnosis
modelFit = train(diadiagnosis ~ ., data=training2, method = "glm")
modelFit = train(diagnosis ~ ., data=training2, method = "glm")
modelFit
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[-trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
set.seed(123); mydata = rnorm(10)
3
set.seed(123); mydata = rnorm(2)
mydata = rnorm(2)
set.seed(123); mydata = rnorm(2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
colnames(training)
trainingindex = training[,58:69]
trainingindex = training[,58:69]
trestindex = testing[, 58:69]
preProcess(x= trainingindex, method = "pca", thresh = .90)
modelFit = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = NULL)
trainingindex = training[,c(1, 58:69)]
trestindex = testing[, c(1, 58:69)]
preProcess(x= trainingindex, method = "pca", thresh = .90)
modelFit = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = NULL)
modelFit
modelFit_pcs = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = "pca")
modelFit_pcs
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingindex = training[,c(1, 58:69)]
trestindex = testing[, c(1, 58:69)]
trainingindex
head(trainingindex)
preProcess(x= trainingindex, method = "pca", thresh = .90)
train_pcs = preProcess(x= trainingindex, method = "pca", thresh = .90)
rm(train_pcs)
train_pca = preProcess(x= trainingindex, method = "pca", thresh = .90)
modelFit = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = NULL)
modelFit
modelFit_pca = train(diagnosis ~ ., data=trainingindex, method = "glm",
preProcess = "pca")
modelFit_pca
train_pca_fit = preProcess(x= trainingindex, method = "pca", thresh = .90)
predict(train_pca_fit, trainingindex)
modelFit_pca_90 = train(diagnosis ~ ., data=modelFit_pca, method = "glm")
typeof(modelFit_pca)
train_pca
rm(train_pca)
train_pca_fit
train_pca = predict(train_pca_fit, trainingindex)
train_pca
typeof(train_pca)
modelFit_pca_90 = train(diagnosis ~ ., data=train_pca, method = "glm")
modelFit_pca_90
modelFit_pca
modelFit
modelFit_pca_90
train_pca80_fit = preProcess(x= trainingindex, method = "pca", thresh = .80)
train_pca80 = predict(train_pca80_fit, trainingindex)
train_pca80
train_pca80_fit
train_pca80 = predict(train_pca80_fit, trainingindex)
train_pca_90 = predict(train_pca_fit, trainingindex)
rm(train_pca)
modelFit_pca_90 = train(diagnosis ~ ., data=train_pca_90, method = "glm")
modelFit_pca_90
modelFit_pca80
train_pca80_fit = preProcess(x= trainingindex, method = "pca", thresh = .80)
train_pca80 = predict(train_pca80_fit, trainingindex)
modelFit_pca80 = train(diagnosis ~ ., data=train_pca80, method = "glm")
modelFit_pca80
train_pca_90
modelFit_pca_90
modelFit_pca80
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
force(vowel.train)
force(vowel.test)
head(vowel.train)
str(vowel.train)
vowel.test$y = as.factor(vowel.test$y)
vowel.train$y = as.factor(vowel.train$y)
str(vowel.train)
unique(vowel.train$y)
library(caret)
modelRF = train(y ~., data=vowel.train, method = "rf")
modelGBM = trian(y ~., data=vowel.train, method = "gbm")
modelGBM = train(y ~., data=vowel.train, method = "gbm")
pred_rf = predict(modelRF, newdata = vowel.test)
pred_rf
modelRF
pred_GBM = predict(modelGBM, newdata = vowel.test)
confusionMatrix(pred_rf, vowel.test$y)
confusionMatrix(pred_rf, vowel.test$y)$overall
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_GBM, vowel.test$y)$overall[1]
confusionMatrix(pred_rf, pred_GBM)
confusionMatrix(pred_rf, pred_GBM)$overall[1]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
setwd("D:/C8Proj")
training_data = read.csv("pml-testing.csv")
training_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
View(training_data)
unique(training_data$classe)
unique(test_data$classe)
View(test_data)
trainnanes = colnames(training_data)
testnames = colnames(test_data)
data.frame(trainnanes, testnames)
matrix(trainnanes, testnames)
apply(data.frame(trainnanes, testnames), 1, identical)
identical(trainnanes, testnames)
for(i in 1:160){
identical(trainnanes[i],testnames[i])
}
df = data.frame(trainnanes, testnames)
df
apply(df, 1, identical)
trainnanes = list(trainnames = colnames(training_data))
testnames = list(testcolnames = colnames(test_data))
mapply(identical, trainnanes, testnames)
mapply(identical, trainnanes[1:159], testnames[1:159])
mapply(identical, trainnanes[1:160], testnames[1:160])
mapply(identical, trainnanes[1:160], testnames[1:160], SIMPLIFY = F)
trainnanes
trainnanes[1:160]
trainnanes
trainnanes[1]
trainnanes[[1]]
trainnames = colnames(training_data)
trainnames = colnames(training_data)
testnames = colnames(test_data)
trainnames
typeof(trainnames)
classof(trainnames)
class(trainnames)
mapply(identical, trainnames, testnames, SIMPLIFY = F)
mapply(identical, trainnames, testnames, SIMPLIFY = T)
idcheck = mapply(identical, trainnames, testnames, SIMPLIFY = T)
idcheck
View(idcheck)
idcheck = mapply(identical, trainnames, testnames, SIMPLIFY = T, USE.NAMES = F)
idcheck
as.numeric(idcheck)
library(knitr)
library(dplyr)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(corrplot)
library(caret)
library(RColorBrewer)
library(gbm)
# Loading the dataset
training_data = read.csv("pml-training.csv")
test_data = read.csv("pml-testing.csv")
complete.cases(training_data)
set.seed(12345)
# Removing NA's, empty values, and unnecesary variables in the Trainning dataset.
EmptyCols <- which(colSums(is.na(TrainData) |TrainData=="")>0.9*dim(TrainData)[1])
TrainDataClean <- TrainData[,-EmptyCols]
TrainDataClean <- TrainDataClean[,-c(1:7)]
dim(TrainDataClean)
TrainData = read.csv("pml-training.csv")
ValidData = read.csv("pml-testing.csv")
TrainData = read.csv("pml-training.csv")
ValidData = read.csv("pml-testing.csv")
EmptyCols <- which(colSums(is.na(TrainData) |TrainData=="")>0.9*dim(TrainData)[1])
TrainDataClean <- TrainData[,-EmptyCols]
TrainDataClean <- TrainDataClean[,-c(1:7)]
dim(TrainDataClean)
corMatrix <- cor(TrainData[, -53])
corrplot(corMatrix, order = "FPC", method = "color", type = "lower",
tl.cex = 0.8, tl.col = rgb(0, 0, 0),
mar = c(1, 1, 1, 1), title = "Training Dataset Correlogram")
corMatrix <- cor(TrainData[, -53])
corrplot(corMatrix, order = "FPC", method = "color", type = "lower",
tl.cex = 0.8, tl.col = rgb(0, 0, 0),
mar = c(1, 1, 1, 1), title = "Training Dataset Correlogram")
corMatrix <- cor(TrainData[, -53])
TrainData = read.csv("pml-training.csv")
ValidData = read.csv("pml-testing.csv")
View(TrainData)
complete.cases(TrainData$X)
View(TrainData)
trainData = read.csv("pml-training.csv")
testData = read.csv("pml-testing.csv")
str(trainData)
numcol = sapply(testData, is.numeric)
numcol
testData[, numcol ]
testdata_num = testData[, numcol ]
testdata_num
View(testData)
sapply(testdata_num, colSums)
colSums(testdata_num)
# Loading the dataset
trainData = read.csv("pml-training.csv")
testData = read.csv("pml-testing.csv")
traindata_num = trainData[, numcol ]
numcol = sapply(trainData, is.numeric)
traindata_num = trainData[, numcol ]
# Loading the dataset
trainData = read.csv("pml-training.csv")
testData = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(gbm)
numcol = sapply(trainData, is.numeric)
traindata = trainData[, numcol ]
trainData = read.csv("pml-training.csv")
testData = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(gbm)
numcoltrain = sapply(trainData, is.numeric)
traindata = trainData[, numcoltrain ]
numcoltest = sapply(testData, is.numeric)
testData = testData[,numcoltest]
View(testData)
coltestset = colnames(testData)
coltestset
traindata = trainingdat %>% select(coltestset)
traindata = traindata %>% select(coltestset)
View(traindata)
# Loading the dataset
trainData_original = read.csv("pml-training.csv")
testData = read.csv("pml-testing.csv")
trainData_original = read.csv("pml-training.csv")
testData_original = read.csv("pml-testing.csv")
numcoltrain = sapply(trainData_original, is.numeric)
numcoltest = sapply(testData_original, is.numeric)
traindata = trainData[, numcoltrain ]
testData = testData[,numcoltest]
# Loading the dataset
trainData_original = read.csv("pml-training.csv")
testData_original = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(gbm)
numcoltrain = sapply(trainData_original, is.numeric)
numcoltest = sapply(testData_original, is.numeric)
traindata = trainData[, numcoltrain ]
testData = testData[,numcoltest]
coltestset = colnames(testData)
traindata = traindata %>% select(coltestset[-57])
# Loading the dataset
trainData_original = read.csv("pml-training.csv")
testData_original = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(gbm)
numcoltrain = sapply(trainData_original, is.numeric)
numcoltest = sapply(testData_original, is.numeric)
traindata = trainData[, numcoltrain ]
testData = testData[,numcoltest]
traindata = trainData_original[, numcoltrain ]
testData = testData_original[,numcoltest]
coltestset = colnames(testData)
traindata = traindata %>% select(coltestset[-57])
traindata$classe = trainData_original$classe
View(traindata)
traindata = traindata %>% filter(complete.cases(traindata))
# Loading the dataset
trainData_original = read.csv("pml-training.csv")
testData_original = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(gbm)
numcoltrain = sapply(trainData_original, is.numeric)
numcoltest = sapply(testData_original, is.numeric)
traindata = trainData_original[, numcoltrain ]
testData = testData_original[,numcoltest]
coltestset = colnames(testData)
traindata = traindata %>% select(coltestset[-57])
traindata$classe = trainData_original$classe
filter(traindata, complete.cases(traindata))
tempo = filter(traindata, complete.cases(traindata))
modelRF = train(classe ~ . , data = traindata, method = "rf")
library(randomForest)
library(corrplot)
# check correlation
cordata = cor(traindata)
traindata
# check correlation
cordata = cor(traindata[-57])
# Loading the dataset
trainData_original = read.csv("pml-training.csv")
testData_original = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(corrplot)
library(gbm)
library(randomForest)
# only grabbng the numeric columns
numcoltrain = sapply(trainData_original, is.numeric)
numcoltest = sapply(testData_original, is.numeric)
traindata = trainData_original[, numcoltrain ]
testData = testData_original[,numcoltest]
# check correlation
cordata = cor(trainData_original[, numcoltrain ])
coplot(cordata)
corrplot(cordata)
# Loading the dataset
trainData_original = read.csv("pml-training.csv")
testData_original = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(gbm)
library(randomForest)
# only grabbng the numeric columns
numcoltrain = sapply(trainData_original, is.numeric)
numcoltest = sapply(testData_original, is.numeric)
traindata = trainData_original[, numcoltrain ]
testData = testData_original[,numcoltest]
#we need to predict on the the test data
# so only takes the columns from trainselt which are in common with test set
coltestset = colnames(testData)
traindata = traindata %>% select(coltestset[-57])
traindata$classe = trainData_original$classe
# Loading the dataset
trainData_original = read.csv("pml-training.csv")
testData_original = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(gbm)
library(randomForest)
# only grabbng the numeric columns
numcoltrain = sapply(trainData_original, is.numeric)
numcoltest = sapply(testData_original, is.numeric)
traindata = trainData_original[, numcoltrain ]
testData = testData_original[,numcoltest]
#we need to predict on the the test data
# so only takes the columns from trainselt which are in common with test set
coltestset = colnames(testData)
traindata = traindata %>% select(coltestset[-57])
traindata$classe = trainData_original$classe
View(traindata)
modelRF = randomForest(x = traindata[-57],
y = traindata$classe,
ntree = 50)
str(traindata)
modelDT = train(classe ~ ., data= traindata, method = "rpart")
predict(modelDT, testData)
modelRF = train(classe ~ ., data= traindata, method = "rf", ntree=5)
predict(modelRF, testData)
predict(modelDT, testData[-57])
predict(modelRF, testData[-57])
traindata$classe = as.factor(traindata$classe)
modelDT = train(classe ~ ., data= traindata, method = "rpart")
predict(modelDT, testData[-57])
unique(trainData_original$classe)
# Loading the dataset
trainData_original = read.csv("pml-training.csv")
testData_original = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(gbm)
library(randomForest)
# only grabbng the numeric columns
numcoltrain = sapply(trainData_original, is.numeric)
numcoltest = sapply(testData_original, is.numeric)
traindata = trainData_original[, numcoltrain ]
testData = testData_original[,numcoltest]
coltestset = colnames(testData)
traindata = traindata %>% select(coltestset[-57])
traindata$classe = trainData_original$classe
traindata$classe = factor(traindata$classe)
str(traindata)
# Loading the dataset
trainData_original = read.csv("pml-training.csv")
testData_original = read.csv("pml-testing.csv")
# loading the libraries
# Libraries
library(dplyr)
library(caret)
library(gbm)
library(randomForest)
# only grabbng the numeric columns
numcoltrain = sapply(trainData_original, is.numeric)
numcoltest = sapply(testData_original, is.numeric)
traindata = trainData_original[, numcoltrain ]
testData = testData_original[,numcoltest]
#we need to predict on the the test data
# so only takes the columns from trainselt which are in common with test set
coltestset = colnames(testData)
traindata = traindata %>% select(coltestset[-57])
traindata$classe = trainData_original$classe
traindata$classe = factor(traindata$classe, levels = c(1,2,3,4,5))
